// Question :
    Given an integer array nums and an integer k, return the number of good subarrays of nums.
    A good array is an array where the number of different integers in that array is exactly k.
    For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
    A subarray is a contiguous part of an array.
//

Solution :

class Solution {
    int atmost(vector<int> &nums,int k){
        unordered_map<int,int> mp;
        int count = 0;
        int i = 0;
        int j = 0;
        while(j<nums.size()){
            mp[nums[j]]++;
            while(mp.size()>k){
                auto it = mp.find(nums[i]);
                it->second--;
                if(it->second==0) mp.erase(it);
                i++;
            }
            count+=(j-i+1);
            j++;
        }
        return count;
    }

public:
    int subarraysWithKDistinct(vector<int>& nums, int k) {
        return atmost(nums,k) - atmost(nums,k-1);
    }
};
